#!/bin/bash

path=$(pwd)

clear
echo "Installing programs..."
echo "Already have yay installed? (y/n)"
read answer
sleep 1 && clear

case $answer in
  "y")
    echo "Installing programs..."
    yay -S cava devour tty-clock-git picom-jonaburg-git cmatrix-git pipes.sh qt5-styleplugins checkupdates-aur perl-checkupdates-aur wal-telegram-git webtorrent-cli python-pywalfox arandr arc-gtk-theme clipmenu zsh cmus dbus dunst emacs feh ffmpeg ffmpegthumbnailer firefox flameshot fzf git gnu-free-fonts go htop imagemagick lxappearance mpv neofetch neovim noto-fonts noto-fonts-cjk noto-fonts-emoji numlockx obs-studio openssh perl pulseaudio pulsemixer python-pip python-pywal qalculate-gtk qt5ct qutebrowser ranger syncthing sxiv telegram-desktop tmux tree ttf-jetbrains-mono ttf-nerd-fonts-symbols-common ttf-nerd-fonts-symbols-2048-em-mono ueberzug redshift unzip vim webkit2gtk xclip yt-dlp zathura zathura-pdf-mupdf zip xorg-server xorg-xinit libx11 libxinerama libxft base base-devel --noconfirm
    sudo pywalfox install
    sleep 1 && clear
    ;;
  "n")
    echo "Installing yay..."
    git clone https://aur.archlinux.org/yay.git /tmp/yay
    cd /tmp/yay
    makepkg -si 
    sleep 1 && clear
    
    echo "Installing programs..."
    yay -S cava devour tty-clock-git picom-jonaburg-git cmatrix-git pipes.sh qt5-styleplugins checkupdates-aur perl-checkupdates-aur wal-telegram-git webtorrent-cli python-pywalfox arandr arc-gtk-theme clipmenu zsh cmus dbus dunst emacs feh ffmpeg ffmpegthumbnailer firefox flameshot fzf git gnu-free-fonts go htop imagemagick lxappearance mpv neofetch neovim noto-fonts noto-fonts-cjk noto-fonts-emoji numlockx obs-studio openssh perl pulseaudio pulsemixer python-pip python-pywal qalculate-gtk qt5ct qutebrowser ranger syncthing sxiv telegram-desktop tmux tree ttf-jetbrains-mono ttf-nerd-fonts-symbols-common ttf-nerd-fonts-symbols-2048-em-mono ueberzug redshift unzip vim webkit2gtk xclip yt-dlp zathura zathura-pdf-mupdf zip xorg-server xorg-xinit libx11 libxinerama libxft base base-devel --noconfirm
    sudo pywalfox install
    sleep 1 && clear
    ;;
  *)
    echo "Invalid answer, skipping..."
    sleep 1 && clear
    ;;
esac

echo "Is this installation on a laptop? (y/n)"
read answer
sleep 1 && clear

case $answer in
  "y")
    echo "Installing dependencies..."
    yay -S acpi acpilight
    sleep 1 && clear
    echo "Want to enable touchpad tap-to-click? (y/n)"
    read answer
    sleep 1 && clear

    case $answer in 
      "y")
        echo "Enabling tap-to-click..."
        sudo mkdir -p /etc/X11/xorg.conf.d && sudo tee <<'EOF' /etc/X11/xorg.conf.d/90-touchpad.conf 1> /dev/null
Section "InputClass"
          Identifier "touchpad"
          MatchIsTouchpad "on"
          Driver "libinput"
          Option "Tapping" "on"
EndSection

EOF
sleep 1 && clear
        ;;

      "n")
        echo "OK, Skipping..."
        sleep 1 && clear
        ;;

      "*")
        echo "Invalid answer, skipping..."
        sleep 1 && clear
        ;;
    esac
    ;;

  "n")
    echo "Skipping..."
    sleep 1 && clear
    ;;
  *)
    echo "Invalid answer, skipping..."
    sleep 1 && clear
    ;;
esac


echo "Already have Oh-My-Zsh installed? (y/n)"
read answer
sleep 1 && clear

case $answer in
  "y")
    if [ -L $HOME/.config/zsh ]; then
    rm $HOME/.config/zsh
    fi
    ln -sfv $path/.config/zsh $HOME/.config/zsh 

    if [ -L $HOME/.zshrc ]; then
    rm $HOME/.zshrc
    fi
    sleep 1 && clear
    ;;
  "n")
    echo "Installing..."
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    if [ -L $HOME/.config/zsh ]; then
    rm $HOME/.config/zsh
    mv $path/.config/zsh/.zshrc.pre-oh-my-zsh $path/.config/zsh/.zshrc
    fi
    ln -sfv $path/.config/zsh $HOME/.config/zsh 

    if [ -f $HOME/.zshrc ]; then
    rm $HOME/.zshrc
    fi
    sleep 1 && clear
    ;;
  *)
    echo "Invalid answer, skipping..."
    sleep 1 && clear
    ;;
esac


echo "Organizing dotfiles..."
echo ""
ln -sf $path/.Xresources $HOME/.Xresources
ln -sf $path/.xinitrc $HOME/.xinitrc
ln -sf $path/.zshenv $HOME/.zshenv

[ ! -d $HOME/.config ] && mkdir $HOME/.config
[ ! -d $HOME/.local ] && mkdir $HOME/.local
[ ! -d $HOME/.local/bin ] && mkdir $HOME/.local/bin

if [ -d ~/.oh-my-zsh ]; then
    mv ~/.oh-my-zsh ~/.config/
fi

if [ -L $HOME/.config/cava ]; then
  rm -rf $HOME/.config/cava
fi
ln -sf $path/.config/cava $HOME/.config/cava

if [ -L $HOME/.config/redshift ]; then
  rm -rf $HOME/.config/redshift
fi
ln -sf $path/.config/redshift $HOME/.config/redshift

if [ -L $HOME/.config/dunst ]; then
  rm -rf $HOME/.config/dunst
fi
ln -sf $path/.config/dunst $HOME/.config/dunst

if [ -L $HOME/.config/mpv ]; then
  rm -rf $HOME/.config/mpv
fi
ln -sf $path/.config/mpv $HOME/.config/mpv

if [ -L $HOME/.config/neofetch ]; then
  rm -rf $HOME/.config/neofetch
fi
ln -sf $path/.config/neofetch $HOME/.config/neofetch

if [ -L $HOME/.config/sxiv ]; then
  rm -rf $HOME/.config/sxiv
fi
ln -sf $path/.config/sxiv $HOME/.config/sxiv

if [ -L $HOME/.config/wal ]; then
  rm -rf $HOME/.config/wal
fi
ln -sf $path/.config/wal $HOME/.config/wal
ln -sf $HOME/.cache/wal/dunstrc $HOME/.config/dunst/dunstrc

if [ -L $HOME/.config/picom ]; then
  rm -rf $HOME/.config/picom
fi
ln -sf $path/.config/picom $HOME/.config/picom

if [ -L $HOME/.config/ranger ]; then
  rm -rf $HOME/.config/ranger
fi
ln -sf $path/.config/ranger $HOME/.config/ranger

if [ -L $HOME/.config/zathura ]; then
  rm -rf $HOME/.config/zathura
fi
ln -sf $path/.config/zathura $HOME/.config/zathura

if [ -L $HOME/.config/qutebrowser ]; then
  rm -rf $HOME/.config/qutebrowser
fi
ln -sf $path/.config/qutebrowser $HOME/.config/qutebrowser

if [ -L $HOME/.config/cmus ]; then
  rm -rf $HOME/.config/cmus
fi
ln -sf $path/.config/cmus $HOME/.config/cmus

if [ -L $HOME/.config/suckless ]; then
  rm -rf $HOME/.config/suckless
fi
ln -sf $path/.config/suckless $HOME/.config/suckless

if [ -L $HOME/.config/nvim ]; then
  rm -rf $HOME/.config/nvim
fi
ln -sf $path/.config/nvim $HOME/.config/nvim

if [ -d $HOME/.emacs.d ]; then
  rm -rf $HOME/.emacs.d
fi

if [ -L $HOME/.config/emacs ]; then
  rm -rf $HOME/.config/emacs
fi
ln -sf $path/.config/emacs $HOME/.config/emacs

if [ -L $HOME/.local/bin/statusbar ]; then
  rm -rf $HOME/.local/bin/statusbar
fi
ln -sf $path/.local/bin/statusbar $HOME/.local/bin

ln -sf $path/.local/bin/cmus-notify $HOME/.local/bin
ln -sf $path/.local/bin/dwall $HOME/.local/bin
ln -sf $path/.local/bin/wg $HOME/.local/bin
ln -sf $path/.local/bin/dfiles $HOME/.local/bin
ln -sf $path/.local/bin/dstreaming $HOME/.local/bin
ln -sf $path/.local/bin/emoji $HOME/.local/bin
ln -sf $path/.local/bin/screenshot $HOME/.local/bin
ln -sf $path/.local/bin/togglemute $HOME/.local/bin
ln -sf $path/.local/bin/nightmode $HOME/.local/bin
ln -sf $path/.local/bin/dwifi $HOME/.local/bin
ln -sf $path/.local/bin/dots $HOME/.local/bin
sleep 1 && clear

echo "Installing suckless programs..."
cd $path/.config/suckless/dwm && sudo make clean install && mv -f config.h config.def.h
cd $path/.config/suckless/st && sudo make clean install && mv -f config.h config.def.h
cd $path/.config/suckless/dmenu && sudo make clean install && mv -f config.h config.def.h
cd $path/.config/suckless/slock && sudo make clean install && mv -f config.h config.def.h
cd $path/.config/suckless/dwmblocks && sudo make clean install && mv -f blocks.h blocks.def.h

chmod +x $path/.local/bin
sleep 1 && clear

echo "Changing default shell..."
chsh -s /usr/bin/zsh
sleep 1 && clear

echo "All done!"
echo "Please log out and log back in for the changes to take effect."
